{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Computa\u00e7\u00e3o em Nuvem","text":"Edi\u00e7\u00e3o <p>2025.1</p>"},{"location":"#kit-p","title":"KIT-P","text":"<p>Jo\u00e3o da Silva</p> <p>Pedro de Souza</p>"},{"location":"#entregas","title":"Entregas","text":"<ul> <li> Roteiro 1 - Data 23/02/2025</li> <li> Roteiro 2</li> <li> Roteiro 3</li> <li> Roteiro 4</li> <li> Projeto</li> </ul>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"roteiro1/main/","title":"Roteiro 1","text":""},{"location":"roteiro1/main/#objetivo","title":"Objetivo","text":"<p>O objetivo deste roteiro \u00e9 documentar a instala\u00e7\u00e3o e verifica\u00e7\u00e3o do PostgreSQL, a implanta\u00e7\u00e3o do Django em diferentes servidores (tanto manualmente quanto via Ansible) e a configura\u00e7\u00e3o do Nginx para gerenciar o tr\u00e1fego de forma centralizada.</p>"},{"location":"roteiro1/main/#montagem-do-roteiro","title":"Montagem do Roteiro","text":"<p>Os pontos \u201ctarefas\u201d s\u00e3o os passos que devem ser seguidos para a realiza\u00e7\u00e3o do roteiro. Eles devem ser claros e objetivos, com evid\u00eancias de que foram realizados.</p>"},{"location":"roteiro1/main/#tarefa-1-verificacao-do-postgresql","title":"Tarefa 1: Verifica\u00e7\u00e3o do PostgreSQL","text":"<p>Ap\u00f3s instalarmos o PostgreSQL, foi necess\u00e1rio verificar se ele estava funcionando corretamente. Para isso, utilizamos os seguintes comandos:</p> <ul> <li><code>systemctl status postgresql</code> </li> <li><code>telnet localhost 5432</code> </li> <li><code>telnet [IP do server 1] 5432</code> </li> </ul> <p>A porta 5432 \u00e9 a porta padr\u00e3o do PostgreSQL. Esses testes comprovam:</p> <ol> <li>Que o servi\u00e7o est\u00e1 ativo no sistema operacional.  </li> <li>Que \u00e9 acess\u00edvel na pr\u00f3pria m\u00e1quina em que foi instalado.  </li> <li>Que \u00e9 acess\u00edvel a partir de uma conex\u00e3o vinda da m\u00e1quina MAIN.  </li> <li>Em qual porta o servi\u00e7o est\u00e1 rodando.</li> </ol>"},{"location":"roteiro1/main/#evidencias-imagens","title":"Evid\u00eancias (Imagens)","text":"<p> Figura 1: Verificando o status do PostgreSQL.</p>"},{"location":"roteiro1/main/#tarefas-2-e-3-instalacao-do-django-no-server-2","title":"Tarefas 2 e 3: Instala\u00e7\u00e3o do Django no Server 2","text":"<p>Foi necess\u00e1rio instalar o Django no server 2, que deve se comunicar com nossa base de dados (PostgreSQL) instalada no server 1. Fizemos o deploy do server 2 e, em seguida, instalamos o Django manualmente, configurando ambiente, depend\u00eancias e arquivos de forma direta no sistema.</p>"},{"location":"roteiro1/main/#evidencias-imagens_1","title":"Evid\u00eancias (Imagens)","text":""},{"location":"roteiro1/main/#tarefa-33-implementacao-manual-do-django-e-do-banco-de-dados","title":"Tarefa 3.3: Implementa\u00e7\u00e3o manual do Django e do Banco de Dados","text":"<ol> <li>Instalamos o Ubuntu 22.04 no server 1 por meio do MAAS Dashboard.  </li> <li>Baixamos e instalamos o PostgreSQL nessa m\u00e1quina.  </li> <li>Criamos um usu\u00e1rio e um banco de dados para a aplica\u00e7\u00e3o.  </li> <li>Editamos o arquivo <code>postgresql.conf</code> para aceitar conex\u00f5es remotas.  </li> <li>Editamos o arquivo <code>pg_hba.conf</code> para liberar acesso \u00e0 subnet.  </li> <li>Liberamos o firewall e reiniciamos o sistema.</li> </ol> <p>Ap\u00f3s isso, iniciamos a aplica\u00e7\u00e3o em Django:</p> <ol> <li>Instalamos o Ubuntu 22.04 no server 2.  </li> <li>Clonamos o reposit\u00f3rio do projeto (via Git).  </li> <li>Entramos no diret\u00f3rio do projeto e instalamos a aplica\u00e7\u00e3o.</li> </ol> <p>A diferenca da implementacao, foi que para o Postgre, tivemos que acessar o Maas manualmente e fazer o deploy no proprio dashboard. Ja para o Django, pedimos uma maquina no terminal CLI e fizemos o deploy por meio desse tambem.</p>"},{"location":"roteiro1/main/#evidencias-imagens_2","title":"Evid\u00eancias (Imagens)","text":""},{"location":"roteiro1/main/#tarefa-4-instalacao-do-django-no-server-3-via-ansible","title":"Tarefa 4: Instala\u00e7\u00e3o do Django no Server 3 via Ansible","text":"<p>Nesta tarefa, repetimos a instala\u00e7\u00e3o do Django, por\u00e9m no server 3, de forma automatizada com o Ansible. Em vez de realizar todos os passos manualmente, utilizamos playbooks</p> <p>M\u00e1quinas com os deploys feitos e seus IPs:</p> <ul> <li>T\u00fanel para o server 2: <code>172.16.0.10</code> </li> <li>T\u00fanel para o server 2: <code>172.16.0.11</code></li> </ul> <p>A diferen\u00e7a \u00e9 que, ao instalar manualmente a aplica\u00e7\u00e3o Django, todos os passos necess\u00e1rios n\u00f3s fizemos manualmente , o que levou mais tempo e poderiamos ter cometido algum erro. J\u00e1 com o Ansible, todo esse processo \u00e9 automatizado por meio de playbooks, garantindo padroniza\u00e7\u00e3o. Isso reduz significativamente o tempo necess\u00e1rio para configurar novos servidores e minimiza erros, al\u00e9m de que se desejarmos exapndir colocando mais maquinas com django, basta replicar a instala\u00e7\u00e3o que ser\u00e1 identica para todos</p>"},{"location":"roteiro1/main/#evidencias-imagens_3","title":"Evid\u00eancias (Imagens)","text":""},{"location":"roteiro1/main/#tarefa-5-deploy-do-nginx-no-server-4","title":"Tarefa 5: Deploy do Nginx no Server 4","text":"<p>Na tarefa 5, fizemos o deploy no server 4 e instalamos o Nginx, que atua como gerenciador de tr\u00e1fego. Ele direciona as requisi\u00e7\u00f5es para o server 2 ou o server 3, conforme a disponibilidade, sem que seja necess\u00e1rio acess\u00e1-los individualmente.</p> <p>Depois disso, configuramos o server 4 (IP <code>172.16.0.12</code>) para encaminhar as p\u00e1ginas do Django provenientes do server 2 ou server 3. Em seguida, criamos um t\u00fanel da m\u00e1quina local para o server 4, permitindo acessar as p\u00e1ginas do Django por meio de um \u00fanico ponto de entrada.</p>"},{"location":"roteiro1/main/#evidencias-imagens_4","title":"Evid\u00eancias (Imagens)","text":""}]}